{
    "type": "object",
    "properties": {
        "location": {
            "required": true,
            "type": "string"
        },
        "access_token": {
            "type": "string"
        },
        "alt": {
            "type": "string",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "default": "json"
        },
        "callback": {
            "type": "string"
        },
        "fields": {
            "type": "string"
        },
        "key": {
            "type": "string"
        },
        "oauth_token": {
            "type": "string"
        },
        "prettyPrint": {
            "type": "boolean",
            "default": true
        },
        "quotaUser": {
            "type": "string"
        },
        "uploadType": {
            "type": "string"
        },
        "upload_protocol": {
            "type": "string"
        },
        "requestBody": {
            "description": "Describes a Cloud Function that contains user computation executed in\nresponse to an event. It encapsulate function and triggers configurations.\nLINT.IfChange",
            "properties": {
                "availableMemoryMb": {
                    "description": "The amount of memory in MB available for a function.\nDefaults to 256MB.",
                    "format": "int32",
                    "type": "integer"
                },
                "description": {
                    "description": "User-provided description of a function.",
                    "type": "string"
                },
                "entryPoint": {
                    "description": "The name of the function (as defined in source code) that will be\nexecuted. Defaults to the resource name suffix, if not specified. For\nbackward compatibility, if function with given name is not found, then the\nsystem will try to use function named \"function\".\nFor Node.js this is name of a function exported by the module specified\nin `source_location`.",
                    "type": "string"
                },
                "environmentVariables": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables that shall be available during function execution.",
                    "type": "object"
                },
                "eventTrigger": {
                    "description": "A source that fires events in response to a condition in another service.",
                    "properties": {
                        "eventType": {
                            "description": "Required. The type of event to observe. For example:\n`providers/cloud.storage/eventTypes/object.change` and\n`providers/cloud.pubsub/eventTypes/topic.publish`.\n\nEvent types match pattern `providers/*/eventTypes/*.*`.\nThe pattern contains:\n\n1. namespace: For example, `cloud.storage` and\n   `google.firebase.analytics`.\n2. resource type: The type of resource on which event occurs. For\n   example, the Google Cloud Storage API includes the type `object`.\n3. action: The action that generates the event. For example, action for\n   a Google Cloud Storage Object is 'change'.\nThese parts are lower case.",
                            "type": "string"
                        },
                        "failurePolicy": {
                            "description": "Specifies policy for failed executions.",
                            "properties": {
                                "retry": {
                                    "description": "If specified, then the function will be retried in case of a failure.",
                                    "properties": {},
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "resource": {
                            "description": "Required. The resource(s) from which to observe events, for example,\n`projects/_/buckets/myBucket`.\n\nNot all syntactically correct values are accepted by all services. For\nexample:\n\n1. The authorization model must support it. Google Cloud Functions\n   only allows EventTriggers to be deployed that observe resources in the\n   same project as the `CloudFunction`.\n2. The resource type must match the pattern expected for an\n   `event_type`. For example, an `EventTrigger` that has an\n   `event_type` of \"google.pubsub.topic.publish\" should have a resource\n   that matches Google Cloud Pub/Sub topics.\n\nAdditionally, some services may support short names when creating an\n`EventTrigger`. These will always be returned in the normalized \"long\"\nformat.\n\nSee each *service's* documentation for supported formats.",
                            "type": "string"
                        },
                        "service": {
                            "description": "The hostname of the service that should be observed.\n\nIf no string is provided, the default service implementing the API will\nbe used. For example, `storage.googleapis.com` is the default for all\nevent types in the `google.storage` namespace.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "httpsTrigger": {
                    "description": "An HTTPS endpoint type of source that can be triggered via URL.",
                    "properties": {
                        "url": {
                            "description": "Output only. The deployed url for the function.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "labels": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels associated with this Cloud Function.",
                    "type": "object"
                },
                "maxInstances": {
                    "description": "The limit on the maximum number of function instances that may coexist at a\ngiven time. This feature is currently in alpha, available only for\nwhitelisted users.",
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "description": "A user-defined name of the function. Function names must be unique\nglobally and match pattern `projects/*/locations/*/functions/*`",
                    "type": "string"
                },
                "network": {
                    "description": "The VPC Network that this cloud function can connect to. It can be\neither the fully-qualified URI, or the short name of the network resource.\nIf the short network name is used, the network must belong to the same\nproject. Otherwise, it must belong to a project within the same\norganization. The format of this field is either\n`projects/{project}/global/networks/{network}` or `{network}`, where\n{project} is a project id where the network is defined, and {network} is\nthe short name of the network.\n\nThis field is mutually exclusive with `vpc_connector` and will be replaced\nby it.\n\nSee [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for\nmore information on connecting Cloud projects.\n\nThis feature is currently in alpha, available only for whitelisted users.",
                    "type": "string"
                },
                "runtime": {
                    "description": "The runtime in which the function is going to run. Example values include:\n`go111`: for Go 1.11\n`nodejs6`: for Node.js 6\n`nodejs8`: for Node.js 8\n`nodejs10`: for Node.js 10\n`python37`: for Python 3.7\n`ruby25`: for Ruby 2.5\n\nIf empty, defaults to `nodejs6`.",
                    "type": "string"
                },
                "serviceAccountEmail": {
                    "description": "The email of the function's service account. If empty, defaults to\n{project_id}@appspot.gserviceaccount.com.",
                    "type": "string"
                },
                "sourceArchiveUrl": {
                    "description": "The Google Cloud Storage URL, starting with gs://, pointing to the zip\narchive which contains the function.",
                    "type": "string"
                },
                "sourceRepository": {
                    "description": "**Beta Feature**\n\nThe source repository where a function is hosted.",
                    "properties": {
                        "deployedUrl": {
                            "description": "Output only. The URL pointing to the hosted repository where the function\nwere defined at the time of deployment. It always points to a specific\ncommit in the format described above.",
                            "type": "string"
                        },
                        "url": {
                            "description": "The URL pointing to the hosted repository where the function is defined.\nThere are supported Cloud Source Repository URLs in the following\nformats:\n\nTo refer to a specific commit:\n`https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*`\nTo refer to a moveable alias (branch):\n`https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*`\nIn particular, to refer to HEAD use `master` moveable alias.\nTo refer to a specific fixed alias (tag):\n`https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*`\n\nYou may omit `paths/*` if you want to use the main directory.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "sourceUploadUrl": {
                    "description": "The Google Cloud Storage signed URL used for source uploading, generated\nby google.cloud.functions.v1.GenerateUploadUrl",
                    "type": "string"
                },
                "status": {
                    "description": "Output only. Status of the function deployment.",
                    "enum": [
                        "CLOUD_FUNCTION_STATUS_UNSPECIFIED",
                        "ACTIVE",
                        "OFFLINE",
                        "DEPLOY_IN_PROGRESS",
                        "DELETE_IN_PROGRESS",
                        "UNKNOWN"
                    ],
                    "type": "string"
                },
                "timeout": {
                    "description": "The function execution timeout. Execution is considered failed and\ncan be terminated if the function is not completed at the end of the\ntimeout period. Defaults to 60 seconds.",
                    "format": "google-duration",
                    "type": "string"
                },
                "updateTime": {
                    "description": "Output only. The last update timestamp of a Cloud Function.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "versionId": {
                    "description": "Output only.\nThe version identifier of the Cloud Function. Each deployment attempt\nresults in a new version of a function being created.",
                    "format": "int64",
                    "type": "string"
                },
                "vpcConnector": {
                    "description": "The VPC Network Connector that this cloud function can connect to. It can\nbe either the fully-qualified URI, or the short name of the network\nconnector resource. The format of this field is\n`projects/*/locations/*/connectors/*`\n\nThis field is mutually exclusive with `network` field and will eventually\nreplace it.\n\nSee [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for\nmore information on connecting Cloud projects.\n\nThis feature is currently in alpha, available only for whitelisted users.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    }
}